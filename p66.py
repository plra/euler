from math import sqrt

interesting_D = [61, 73, 94, 97, 106, 109, 113, 124, 127, 133, 137, 139, 149, 151, 157, 163, 166, 172, 173, 179, 181, 191, 193, 199, 202, 211, 214, 217, 229, 233, 239, 241, 244, 249, 250, 251, 253, 261, 262, 265, 268, 271, 274, 277, 281, 283, 284, 292, 293, 295, 298, 301, 302, 307, 309, 311, 313, 317, 319, 329, 331, 334, 337, 341, 343, 349, 353, 358, 364, 365, 367, 369, 373, 376, 379, 382, 388, 389, 391, 393, 394, 397, 406, 409, 412, 415, 417, 419, 421, 422, 424, 428, 429, 430, 431, 433, 436, 445, 446, 449, 451, 452, 453, 454, 457, 460, 461, 463, 466, 467, 471, 477, 478, 479, 481, 487, 489, 490, 491, 493, 496, 497, 501, 502, 508, 509, 511, 513, 517, 519, 521, 523, 524, 526, 532, 533, 534, 535, 537, 538, 541, 542, 547, 548, 549, 550, 553, 554, 556, 559, 562, 565, 566, 569, 571, 581, 583, 586, 587, 589, 593, 594, 596, 597, 598, 599, 601, 604, 606, 607, 610, 613, 614, 617, 619, 622,
                 628, 629, 631, 633, 634, 636, 637, 639, 640, 641, 643, 645, 647, 649, 652, 653, 654, 655, 657, 661, 662, 664, 666, 667, 669, 670, 673, 679, 681, 682, 683, 685, 686, 688, 691, 692, 694, 698, 699, 700, 701, 703, 709, 713, 716, 717, 718, 719, 721, 722, 724, 733, 734, 737, 739, 741, 742, 745, 746, 748, 749, 750, 751, 753, 754, 757, 758, 761, 763, 764, 766, 769, 771, 772, 773, 775, 778, 779, 781, 787, 789, 790, 794, 796, 797, 801, 802, 805, 806, 807, 808, 809, 811, 814, 821, 823, 826, 829, 831, 833, 834, 835, 838, 844, 845, 846, 847, 849, 851, 853, 854, 856, 857, 859, 861, 862, 863, 865, 868, 869, 871, 873, 877, 878, 879, 881, 883, 886, 889, 893, 907, 911, 913, 914, 916, 917, 918, 919, 921, 922, 925, 926, 928, 929, 931, 932, 934, 937, 941, 946, 947, 949, 951, 953, 954, 955, 956, 958, 964, 965, 967, 969, 970, 971, 972, 974, 976, 977, 981, 988, 989, 991, 995, 996, 997, 998, 999, 1000]


def cf_rep(n):
    rn = sqrt(n)
    if rn % 1 == 0:
        return 0

    a = [int(rn)]
    # consider x / (rn - y)
    x = 1
    y = a[0]
    (x_0, y_0) = (x, y)
    # find a_1 from (sqrt n + a_0) / (n - a_0^2)
    for i in range(1, 2**64):
        a_i = int(x / (rn - y))
        # conjugate: x(rn + y) / (n - y^2)
        # write a_i + (x rn + xy - a_i(n - y^2)) / (n - y^2)
        x = (n - y**2) / x
        # this is the new x!
        y = a_i * x - y
        a.append(a_i)
        if (x, y) == (x_0, y_0):
            return a
    return None


def conv(n, cf_rep):
    # start with "tail": 1/a_n
    num = 1
    denom = cf_rep[n-1]
    for i in range(n-2, -1, -1):
        a_i = cf_rep[i]
        # compute 1 / (a_i + num/denom)
        new_num = denom
        new_denom = a_i * denom + num
        num, denom = new_num, new_denom
    # done flipping numerator and denominator at a_0
    return (denom, num)


# (x, y) solving Pell must be in sequence of convergents for sqrt(D)
def min_x(D, num_convergents):
    if sqrt(D) % 1 == 0:
        return 0
    rep_seq = cf_rep(D)
    for _ in range(int(num_convergents / (len(rep_seq) - 1))):
        rep_seq += rep_seq[1:]
    for n in range(1, num_convergents):
        # get nth convergent of sequence for sqrt(D)
        (x, y) = conv(n, rep_seq)
        # print(x, y)
        if x**2 == D * y**2 + 1:
            print('{}^2 - {}*{}^2 = 1'.format(x, D, int(y)))
            return x
    print('### D = {}: not found'.format(D))


min_xs = [min_x(D, 100) for D in range(1001)]
# max_x = 1766319049
for D in interesting_D:
    min_x(D, 100)
